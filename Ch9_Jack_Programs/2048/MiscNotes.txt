
Some of my notes pertaining to this project, which hopefully will make some things clear

-----------------------------------------------------------------------------------------

My thought process through the movement algorithm, where [x][x][x][x] is 
one row, [x] shows a value in the cell, {x} shows the value currently being 
considered (stored as i in the code), and (x) the value being compared to to {x}:

Assume the following row:
[2][2][4][0]

Start with the first value
{2}[2][4][0]

Compare it to the next value
{2}(2)[4][0]

If they are the same value, combine them
{4}(0)[4][0]

Move on to the next value after an operation
[4]{0}[4][0]

If the current value is a zero, find the next non-zero value
[4]{0}(4)[0]

Move that value to where the zero was
[4]{4}(0)[0]

Continue to repeat
[4][4]{0}[0]

If the last value is being compared, end the loop
[4][4]{0}(0)

-----------------------------------------------------------------------------------------

let x = 0;
while(x < horzSize)
{
    let i = 0;

    while(i < (vertSize - 1))
    {
        let y = i + 1;
        while(y < vertSize)
        {
            if(~(board[i + (y * vertSize)] = 0))
            {
                if(board[i + (y * vertSize)] = board[x + (y * vertSize)])
                {
                    let board[i + (y * vertSize)] = board[i + (y * vertSize)] + board[x + (y * vertSize)];
                    let board[x + (y * vertSize)] = 0;
                    //Manually breaking the loop
                    let y = y + vertSize;
                }
            }

            if(y < vertSize)
            {
                if(~(board[x + (y * vertSize)] = 0))
                {
                    if(board[i + (y * vertSize)] = 0)
                    {
                        let board[i + (y * vertSize)] = board[x + (y * vertSize)];
                        let board[x + (y * vertSize)] = 0;
                        let i = i - 1;
                        let y = i;
                    }
                    //Manually breaking the loop
                    let y = y + vertSize;
                }
            }
            let y = y + 1;
        }
        let i = i + 1;
    }
    let x = x + 1;
}
return;

-----------------------------------------------------------------------------------------
