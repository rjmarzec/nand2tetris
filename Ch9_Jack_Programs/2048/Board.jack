// The game 2048, but remade in the Jack language

class Board
{
	field int horzSize;
	field int vertSize;
	field int baseNum;

	field Array board;
	field int score;
	field boolean isGameOver;
	field boolean doPrint;

    field Random random;

    static String scoreLine;
    static String space;
    static String tab;

    constructor Board new(int horzSizeIn, int vertSizeIn, int baseNumIn)
    {
    	let horzSize = horzSizeIn;
    	let vertSize = vertSizeIn;
    	let baseNum = baseNumIn;
    	let doPrint = true;
    	let board = Array.new(horzSize * vertSize);
        let isGameOver = false;

        let space = " ";
        let scoreLine = "Score: ";
        let tab = "\t";

        let random = Random.new(horzSize * vertSize);

    	do clearBoard();

    	return this;
    }

    method void updateBoard(int keyPressed)
    {
    	var int currentKey;
    	var int previousKey;
    	let currentKey = keyPressed;
    	let previousKey = currentKey;

    	let doPrint = false;

    	//130, 131, 132, and 133 are all valid directional inputs
    	if(currentKey < 134)
    	{
    		if(currentKey > 129)
    		{ 
    			while(true)
    			{
    				//checking for the user to release an arrow key
    				if(currentKey > 133)
    				{
    					do Output.printInt(previousKey);
                        do moveBoard(previousKey);
    					let doPrint = true;
    					return;
    				}
    				if(currentKey < 130)
    				{
    					do Output.printInt(previousKey);
                        do moveBoard(previousKey);
    					let doPrint = true;
    					return;
    				}
    				let previousKey = currentKey;
    				let currentKey = Keyboard.keyPressed();
    			}
    		}
    	}
    	return;
    }

    method void moveBoard(int currentKey)
    {
    	// 130 = left, 131 = up, 132 = right, 133 = down
    	if(currentKey = 130)
    	{
    		do moveBoardLeftRight(true);
    		return;
    	}
    	if(currentKey = 131)
    	{
    		do moveBoardUpDown(true);
    		return;
    	}
    	if(currentKey = 132)
    	{
    		do moveBoardLeftRight(false);
    		return;
    	}
    	if(currentKey = 133)
    	{
    		do moveBoardUpDown(false);
    		return;
    	}
    	return;
    }

    method void moveBoardUpDown(boolean directionIsUp)
    {
        var int x;
        var int i;
        var int y;
        var int currentNum;
        var int previousNum;
        var int previousNumIndex;
        var bool didMove;

        let didMove = false;

    	//Move Up
    	if(directionIsUp)
    	{   
            let x = 0;
            while(x < horzSize)
            {
                let i = 0;

                while(i < (vertSize - 1))
                {
                    let y = i + 1;
                    while(y < vertSize)
                    {
                        if(~(board[x + (i * vertSize)] = 0))
                        {
                            if(board[x + (i * vertSize)] = board[x + (y * vertSize)])
                            {
                                let board[x + (i * vertSize)] = board[x + (i * vertSize)] + board[x + (y * vertSize)];
                                let board[x + (y * vertSize)] = 0;

                                let score = score + board[x + (i * vertSize)];

                                //Manually breaking the loop
                                let y = y + vertSize;

                                let didMove = true;
                            }
                        }

                        if(y < vertSize)
                        {
                            if(~(board[x + (y * vertSize)] = 0))
                            {
                                if(board[x + (i * vertSize)] = 0)
                                {
                                    let board[x + (i * vertSize)] = board[x + (y * vertSize)];
                                    let board[x + (y * vertSize)] = 0;
                                    let i = i - 1;
                                    let y = i;

                                    let didMove = true;
                                }
                                //Manually breaking the loop
                                let y = y + vertSize;
                            }
                        }
                        let y = y + 1;
                    }
                    let i = i + 1;
                }
                let x = x + 1;
            }
    	}
    	//Move Down
    	else
    	{
    		let x = 0;
            while(x < horzSize)
            {
                let i = vertSize - 1;

                while(i > 0)
                {
                    let y = i - 1;
                    while(y > -1)
                    {
                        if(~(board[x + (i * vertSize)] = 0))
                        {
                            if(board[x + (i * vertSize)] = board[x + (y * vertSize)])
                            {
                                let board[x + (i * vertSize)] = board[x + (i * vertSize)] + board[x + (y * vertSize)];
                                let board[x + (y * vertSize)] = 0;

                                let score = score + board[x + (i * vertSize)];

                                //Manually breaking the loop
                                let y = y - vertSize;

                                let didMove = true;
                            }
                        }

                        if(y < vertSize)
                        {
                            if(~(board[x + (y * vertSize)] = 0))
                            {
                                if(board[x + (i * vertSize)] = 0)
                                {
                                    let board[x + (i * vertSize)] = board[x + (y * vertSize)];
                                    let board[x + (y * vertSize)] = 0;
                                    let i = i + 1;
                                    let y = i;

                                    let didMove = true;
                                }
                                //Manually breaking the loop
                                let y = y - vertSize;
                            }
                        }
                        let y = y - 1;
                    }
                    let i = i - 1;
                }
                let x = x + 1;
            }
    	}
        if(didMove)
        {
            do spawnNewBlock();
        }
        return;
    }

    method void moveBoardLeftRight(boolean directionIsLeft)
    {
    	var int x;
        var int i;
    	var int y;
    	var int currentNum;
    	var int previousNum;
    	var int previousNumIndex;
        var bool didMove;

        let didMove = false;

    	//Move Up
    	if(directionIsLeft)
    	{
            let y = 0;
            while(y < vertSize)
            {
                let i = 0;

                while(i < (horzSize - 1))
                {
                    let x = i + 1;
                    while(x < horzSize)
                    {
                        if(~(board[i + (y * vertSize)] = 0))
                        {
                            if(board[i + (y * vertSize)] = board[x + (y * vertSize)])
                            {
                                let board[i + (y * vertSize)] = board[i + (y * vertSize)] + board[x + (y * vertSize)];
                                let board[x + (y * vertSize)] = 0;

                                let score = score + board[i + (y * vertSize)];

                                //Manually breaking the loop
                                let x = x + horzSize;

                                let didMove = true;
                            }
                        }

                        if(x < horzSize)
                        {
                            if(~(board[x + (y * vertSize)] = 0))
                            {
                                if(board[i + (y * vertSize)] = 0)
                                {
                                    let board[i + (y * vertSize)] = board[x + (y * vertSize)];
                                    let board[x + (y * vertSize)] = 0;
                                    let i = i - 1;
                                    let x = i;

                                    let didMove = true;
                                }
                                //Manually breaking the loop
                                let x = x + horzSize;
                            }
                        }
                        let x = x + 1;
                    }
                    let i = i + 1;
                }
                let y = y + 1;
            }
    	}
    	//Move Down
    	else    	
    	{
            let y = 0;
            while(y < vertSize)
            {
                let i = horzSize - 1;

                while(i > 0)
                {
                    let x = i - 1;
                    while(x > -1)
                    {
                        if(~(board[i + (y * vertSize)] = 0))
                        {
                            if(board[i + (y * vertSize)] = board[x + (y * vertSize)])
                            {
                                let board[i + (y * vertSize)] = board[i + (y * vertSize)] + board[x + (y * vertSize)];
                                let board[x + (y * vertSize)] = 0;

                                let score = score + board[i + (y * vertSize)];
                                
                                //Manually breaking the loop
                                let x = x - horzSize;

                                let didMove = true;
                            }
                        }

                        if(x > -1)
                        {
                            if(~(board[x + (y * vertSize)] = 0))
                            {
                                if(board[i + (y * vertSize)] = 0)
                                {
                                    let board[i + (y * vertSize)] = board[x + (y * vertSize)];
                                    let board[x + (y * vertSize)] = 0;
                                    let i = i + 1;
                                    let x = i;

                                    let didMove = true;
                                }
                                //Manually breaking the loop
                                let x = x - horzSize;
                            }
                        }
                        let x = x - 1;
                    }
                    let i = i - 1;
                }
                let y = y + 1;
            }
    	}
        if(didMove)
        {
            do spawnNewBlock();
        }
        return;
    }

    method void spawnNewBlock()
    {
        var int zeroCounter;
        var int randInSpawnLocation;
        var int blockValue;
        var int newBlockLocation;
        var int i;

        let zeroCounter = 0;
        let i = 0;

        while(i < (vertSize * horzSize))
        {
            if(board[i] = 0)
            {
                let zeroCounter = zeroCounter + 1;
            }
            let i = i + 1;
        }

        if(zeroCounter > 0)
        {
            let randInSpawnLocation = random.randRange(zeroCounter - 1);
            let zeroCounter = -1;
            let i = 0;
            while(i < (vertSize * horzSize))
            {
                //let board[0] = zeroCounter;
                if(board[i] = 0)
                {   
                    let zeroCounter = zeroCounter + 1;
                    if(zeroCounter = randInSpawnLocation)
                    {
                        let blockValue = random.randRange(3);
                        if(blockValue = 0)
                        {
                            let board[i] = baseNum * 2;
                        }
                        else
                        {
                            let board[i] = baseNum;
                        }
                    }
                }
                let i = i + 1;
            }
        }
        return;
    }

    method void clearBoard()
    {
    	var int i;
    	let i = 0;

    	do board.dispose();
    	let board = Array.new(16);

        do spawnNewBlock();

    	return;
    }

    method void printBoard()
    {
    	var int x;
    	var int y;
        var bool drawLine;
        var int drawLineCounter;

    	let x = 0;
    	let y = 0;
        let drawLine = true;
        let drawLineCounter = 0;

    	let doPrint = false;

  		do Output.moveCursor(0, 0);

    	while(y < vertSize)
    	{
    		while(x < horzSize)
    		{
                if(drawLine)
                {
                    while(drawLineCounter < (7 * horzSize) + 2)
                    {
                        do Output.printString(tab);
                        let drawLineCounter = drawLineCounter + 1;
                    }
                    if(drawLineCounter = (7 * horzSize) + 1)
                    {
                        let drawLine = false;
                    }
                }
                else
                {
                    do Output.printString(tab);
                    do Output.printString(space);
                    if(board[x+(y*4)] < 1000)
                    {
                        do Output.printString(space);
                        if(board[x+(y*4)] < 100)
                        {
                            do Output.printString(space);
                            if(board[x+(y*4)] < 10)
                            {
                                do Output.printString(space);
                            }
                        }
                    }
                    do Output.printInt(board[x+(y*4)]);
                    do Output.printString(space);

                    let x = x + 1;
                }
                let drawLineCounter = 0;
    		}
            do Output.printString(tab);
    		do Output.println();
    		let y = y + 1;
    		let x = 0;
    	}
        do Output.printString(scoreLine);
        do Output.printInt(score);

    	return;
    }

    method void updateRandom(Random newRandom)
    {
        //do random.dispose();
        let random = newRandom;
        return;
    }

    //Getter methods
    method int getSize()
    {
        return horzSize * vertSize;
    }

    method boolean getDoPrint()
    {
    	return doPrint;
    }

    method int getScore()
    {
    	return score;
    }

    method boolean getIsGameOver()
    {
    	return isGameOver;
    }
}


