// The game 2048, but remade in the Jack language

class Board
{
	field int horzSize;
	field int vertSize;
	field int baseNum;

	field Array board;
	field int score;
	field boolean isGameOver;
	field boolean doPrint;

	field int tempNum;

    constructor Board new(int horzSizeIn, int vertSizeIn, int baseNumIn)
    {
    	let horzSize = horzSizeIn;
    	let vertSize = vertSizeIn;
    	let baseNum = baseNumIn;
    	let doPrint = true;
    	let board = Array.new(16);
    	let tempNum = 0;
        let isGameOver = false;

    	do clearBoard();

    	return this;
    }

    method void updateBoard(int keyPressed)
    {
    	var int currentKey;
    	var int previousKey;
    	let currentKey = keyPressed;
    	let previousKey = currentKey;

    	let doPrint = false;

    	//130, 131, 132, and 133 are all valid directional inputs
    	if(currentKey < 134)
    	{
    		if(currentKey > 129)
    		{ 
    			while(true)
    			{
    				//checking for the user to release an arrow key
    				if(currentKey > 133)
    				{
    					do Output.printInt(previousKey);
                        do moveBoard(previousKey);
    					let doPrint = true;
    					return;
    				}
    				if(currentKey < 130)
    				{
    					do Output.printInt(previousKey);
                        do moveBoard(previousKey);
    					let doPrint = true;
    					return;
    				}
    				let previousKey = currentKey;
    				let currentKey = Keyboard.keyPressed();
    			}
    		}
    	}
    	return;
    }

    method void moveBoard(int currentKey)
    {
    	// 130 = left, 131 = up, 132 = right, 133 = down
    	if(currentKey = 130)
    	{
    		do moveBoardLeftRight(true);
    		return;
    	}
    	if(currentKey = 131)
    	{
    		do moveBoardUpDown(true);
    		return;
    	}
    	if(currentKey = 132)
    	{
    		do moveBoardLeftRight(false);
    		return;
    	}
    	if(currentKey = 133)
    	{
    		do moveBoardUpDown(false);
    		return;
    	}
    	return;
    }

    method void moveBoardUpDown(boolean directionIsUp)
    {
        var int x;
        var int i;
        var int y;
        var int currentNum;
        var int previousNum;
        var int previousNumIndex;

    	//Move Up
    	if(directionIsUp)
    	{   
            let x = 0;
            while(x < horzSize)
            {
                let i = 0;

                while(i < (vertSize - 1))
                {
                    let y = i + 1;
                    while(y < vertSize)
                    {
                        if(~(board[x + (i * vertSize)] = 0))
                        {
                            if(board[x + (i * vertSize)] = board[x + (y * vertSize)])
                            {
                                let board[x + (i * vertSize)] = board[x + (i * vertSize)] + board[x + (y * vertSize)];
                                let board[x + (y * vertSize)] = 0;
                                //Manually breaking the loop
                                let y = y + vertSize;
                            }
                        }

                        if(y < vertSize)
                        {
                            if(~(board[x + (y * vertSize)] = 0))
                            {
                                if(board[x + (i * vertSize)] = 0)
                                {
                                    let board[x + (i * vertSize)] = board[x + (y * vertSize)];
                                    let board[x + (y * vertSize)] = 0;
                                    let i = i - 1;
                                    let y = i;
                                }
                                //Manually breaking the loop
                                let y = y + vertSize;
                            }
                        }
                        let y = y + 1;
                    }
                    let i = i + 1;
                }
                let x = x + 1;
            }
            return;
    	}
    	//Move Down
    	else
    	{
    		let x = 0;
            while(x < horzSize)
            {
                let i = vertSize - 1;

                while(i > 0)
                {
                    let y = i - 1;
                    while(y > -1)
                    {
                        if(~(board[x + (i * vertSize)] = 0))
                        {
                            if(board[x + (i * vertSize)] = board[x + (y * vertSize)])
                            {
                                let board[x + (i * vertSize)] = board[x + (i * vertSize)] + board[x + (y * vertSize)];
                                let board[x + (y * vertSize)] = 0;
                                //Manually breaking the loop
                                let y = y - vertSize;
                            }
                        }

                        if(y < vertSize)
                        {
                            if(~(board[x + (y * vertSize)] = 0))
                            {
                                if(board[x + (i * vertSize)] = 0)
                                {
                                    let board[x + (i * vertSize)] = board[x + (y * vertSize)];
                                    let board[x + (y * vertSize)] = 0;
                                    let i = i + 1;
                                    let y = i;
                                }
                                //Manually breaking the loop
                                let y = y - vertSize;
                            }
                        }
                        let y = y - 1;
                    }
                    let i = i - 1;
                }
                let x = x + 1;
            }
            return;
    	}
    }

    method void moveBoardLeftRight(boolean directionIsLeft)
    {
    	var int x;
        var int i;
    	var int y;
    	var int currentNum;
    	var int previousNum;
    	var int previousNumIndex;

    	//Move Up
    	if(directionIsLeft)
    	{
            let y = 0;
            while(y < vertSize)
            {
                let i = 0;

                while(i < (horzSize - 1))
                {
                    let x = i + 1;
                    while(x < horzSize)
                    {
                        if(~(board[i + (y * vertSize)] = 0))
                        {
                            if(board[i + (y * vertSize)] = board[x + (y * vertSize)])
                            {
                                let board[i + (y * vertSize)] = board[i + (y * vertSize)] + board[x + (y * vertSize)];
                                let board[x + (y * vertSize)] = 0;
                                //Manually breaking the loop
                                let x = x + horzSize;
                            }
                        }

                        if(x < horzSize)
                        {
                            if(~(board[x + (y * vertSize)] = 0))
                            {
                                if(board[i + (y * vertSize)] = 0)
                                {
                                    let board[i + (y * vertSize)] = board[x + (y * vertSize)];
                                    let board[x + (y * vertSize)] = 0;
                                    let i = i - 1;
                                    let x = i;
                                }
                                //Manually breaking the loop
                                let x = x + horzSize;
                            }
                        }
                        let x = x + 1;
                    }
                    let i = i + 1;
                }
                let y = y + 1;
            }
            return;
    	}

    	//Move Down
    	else    	
    	{
            let y = 0;
            while(y < vertSize)
            {
                let i = horzSize - 1;

                while(i > 0)
                {
                    let x = i - 1;
                    while(x > -1)
                    {
                        if(~(board[i + (y * vertSize)] = 0))
                        {
                            if(board[i + (y * vertSize)] = board[x + (y * vertSize)])
                            {
                                let board[i + (y * vertSize)] = board[i + (y * vertSize)] + board[x + (y * vertSize)];
                                let board[x + (y * vertSize)] = 0;
                                //Manually breaking the loop
                                let x = x - horzSize;
                            }
                        }

                        if(x > -1)
                        {
                            if(~(board[x + (y * vertSize)] = 0))
                            {
                                if(board[i + (y * vertSize)] = 0)
                                {
                                    let board[i + (y * vertSize)] = board[x + (y * vertSize)];
                                    let board[x + (y * vertSize)] = 0;
                                    let i = i + 1;
                                    let x = i;
                                }
                                //Manually breaking the loop
                                let x = x - horzSize;
                            }
                        }
                        let x = x - 1;
                    }
                    let i = i - 1;
                }
                let y = y + 1;
            }
    		return;
    	}
    }

    method void clearBoard()
    {
    	var int i;
    	let i = 0;

    	do board.dispose();
    	let board = Array.new(16);

    	while(i < 16)
    	{
    		let board[i] = 0;
    		if(i = 2)
    		{
    			let board[i] = baseNum;
    		}
    		if(i = 3)
    		{
    			let board[i] = baseNum;
    		}
            if(i = 5)
            {
                let board[i] = baseNum;
            }
            if(i = 7)
            {
                let board[i] = baseNum;
            }
            if(i = 8)
            {
                let board[i] = baseNum;
            }
            if(i = 9)
            {
                let board[i] = baseNum;
            }
            if(i = 11)
            {
                let board[i] = baseNum;
            }

            if(i = 12)
            {
                let board[i] = baseNum;
            }
            if(i = 13)
            {
                let board[i] = baseNum;
            }
            if(i = 14)
            {
                let board[i] = baseNum;
            }
            if(i = 15)
            {
                let board[i] = baseNum;
            }

    		let i = i + 1;
    	}
    	return;
    }

    method void printBoard()
    {
    	var int x;
    	var int y;
    	let x = 0;
    	let y = 0;

    	let doPrint = false;

  		do Output.moveCursor(0, 0);

    	while(y < 4)
    	{
    		while(x < 4)
    		{
    			do Output.printInt(board[x+(y*4)]);
    			do Output.printChar(" ");
    			let x = x + 1;
    		}
    		do Output.println();
    		let y = y + 1;
    		let x = 0;
    	}

    	return;
    }


    //Getter methods
    method boolean doPrint()
    {
    	return doPrint;
    }

    method int getScore()
    {
    	return score;
    }

    method boolean isGameOver()
    {
    	return isGameOver;
    }
}


